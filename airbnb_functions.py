# -*- coding: utf-8 -*-
"""AirBnB - Functions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0DB42apYxbub-wLKby7i2lfzYnffMpa
"""


import pandas as pd
import numpy as np

# Read CSV
df = pd.read_csv("AB_NYC_2019.csv")

# CHECK:
print(df.shape)
df.head()


from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
import category_encoders as ce
import pandas as pd
import numpy as np

import warnings
warnings.filterwarnings('ignore')

def preprocessing(df):
  """
  Preprocesses the data.

  Input: DataFrame

  Output: X_train, X_test, y_train, y_test
  """
  # Copying DF
  dfx = df.copy()

  ## EDA
  # Dropping Columns
  dfx.drop(columns=["host_name", "last_review", "reviews_per_month"], inplace = True)

  # Removing -- Custom Outliers
  dfx = dfx[(dfx["price"] > 0) & 
            (dfx["price"] < 10000)]
  
  # New Column -- 'log_price'
  dfx["log_price"] = np.log(dfx["price"].values)


  # Target and Features
  target = "log_price"
  features = ["neighbourhood_group",
              "neighbourhood",
              "latitude",
              "longitude",
              "room_type",
              "minimum_nights",
              "number_of_reviews",
              "calculated_host_listings_count",
              "availability_365"]
  
  # X Features Matrix
  X = dfx[features]

  # y taregt vector
  y = dfx[target]
  
  # Mapping - 'room_type'
  room_type_dict = {"Shared room":1, "Private room":2, "Entire home/apt":3}
  X["room_type"] = X["room_type"].map(room_type_dict)
  # print(X["room_type"])

  # Train Test Split
  X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                      test_size=.2,
                                                      random_state=42)

  # Preprocess Pipeline -- OrdinalEncoder and StandardScaler
  preprocess = make_pipeline(
      ce.OrdinalEncoder(),
      StandardScaler()
  )

  # Fit Transform and Transform Training and Testing Data
  X_train = preprocess.fit_transform(X_train)
  X_test = preprocess.transform(X_test)

  # Create DataFrame for X Matrices
  X_train_df = pd.DataFrame(X_train, columns=features) 
  X_test_df = pd.DataFrame(X_test, columns=features)
  print(X_train_df.shape,
        X_test_df.shape, 
        X_train.shape, 
        X_test.shape, 
        y_train.shape, 
        y_test.shape)

  # Return
  return X_train_df, X_test_df, X_train, X_test, y_train, y_test


# Calling Function
X_train_df, X_test_df, X_train, X_test, y_train, y_test = preprocessing(df)


# # CHECK:
# X_train_df.head()

from xgboost import XGBRegressor

def xgboost_function(X_train, y_train):
  
  # Instantiate Model
  xgb = XGBRegressor()
  
  # Fit
  xgb.fit(X_train, y_train)
  
  # Training Prediction
  train_pred = xgb.predict(X_train)
  
  return train_pred

# Defining Function
def df_maker(y_vector, y_pred_vector):
  
  # Training Data
  log_price = pd.DataFrame(y_vector, columns=["log_price"])
  log_price_pred = pd.DataFrame(y_pred_vector, columns=["log_price_pred"])

  unlog_price = np.exp(log_price.values)
  unlog_price = pd.DataFrame(unlog_price, columns=["unlog_price"])

  unlog_pred_price = np.exp(log_price_pred.values)
  unlog_pred_price = pd.DataFrame(unlog_pred_price, columns=["unlog_pred_price"])


  df_logs = pd.concat([log_price, log_price_pred, unlog_price, unlog_pred_price], 
                       axis=1)
  
  return df_logs